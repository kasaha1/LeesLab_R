snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

#------- my Snippets --------

snippet myPack
	# install Kang's basic functions package from the git-hub
	#------------- Packages ----
	packages <- c("tidyverse", "data.table")
	kasa.instPak (packages)
	#-----------------------------
	#------------- Bioc_Packages ----
	# packages_bioc <- c()
	# kasa.instPak_bioc (packages_bioc)
	#-----------------------------


snippet myError
	${1:name}=tryCatch({
		${2:expression}}
		,warning = function(w) {
		${3:warning-handler-code}
		}, error = function(e) {
		${4:error-handler-code}
		}, finally = {
		${5:cleanup-code}
	})

snippet myPng
	png("${1:fileName}.png",width = 700, height = 500,pointsize = 12, bg = "white")
		${2:plotExpression}
	dev.off()

snippet myPdf
	cairo_pdf("${1:fileName}.pdf",width = 15, height = 10,pointsize = 12)
		${2:plotExpression}
	dev.off()
	
snippet mySurvival
	library(survival)
	library(survminer)
	# fit #
	fit <- survfit(Surv(${1:time_var},${2:status_var}==1) ~ ${3:strata(def:1)}, data = ${4:raw.data})
	ggsurvplot(fit,conf.int = F, pval = TRUE)
	# survival rate #
	# survivalRate <- summary(fit,times = 30) # 30--> periodes
	# as.character(survivalRate$strata[1])
	# as.numeric(survivalRate$surv[1])
	# as.character(survivalRate$strata[2])
	# as.numeric(survivalRate$surv[2])
	# p value #
	# fit_differ <- survdiff(Surv(${1:time_var},${2:status_var}==1)~ ${3:strata(def:1)}, data = ${4:raw.data})
	# p.val <- 1 - pchisq(fit_differ\$chisq, length(fit_differ\$n) - 1)
	
snippet myColors
	library(colorspace)
	library(RColorBrewer)
	# # show examples ---------------------
	# # wheel expression of colors-------
	# wheel <- function(col, radius = 1, ...) pie(rep(1, length(col)), col = col, radius = radius, ...)
	# # bar expression of colors-------
	# pal <- function(col, border = "light gray"){
	#   n <- length(col)
	#   plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = "", ylab = "")
	#   rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
	# }
	
	colorpal <- choose_palette() #user customizing, need to be copy and paste of function codes
	colorpal(10)[c(1:10)]
	rainbow_hcl(10)[c(1:10)]
	brewer.pal(12,"Set3")
	
snippet myGitinstall
	# install Kang's basic functions package from the git-hub
	if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
	
	devtools::install_github("kasaha1/kasaBasicFunctions")
	library(kasaBasicFunctions)
	
snippet myMemoryReset
	# clear memory
	# rm(list = ls()[!(ls() %in% c("${1:variable}","${2:variable}","${3:variable}"))])
	rm(list = ls())
	gc()
snippet myGGPLOT2
	ggplot(k,aes(x=mpg,y=cyl))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))

snippet myDirOut
	dirOut <- "Output"
	if(!file.exists(dirOut)){dir.create(dirOut)}
